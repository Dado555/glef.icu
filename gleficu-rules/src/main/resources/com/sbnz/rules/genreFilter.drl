package com.sbnz.rules;

import java.util.List;
import java.util.Set;

import com.sbnz.gleficu.model.facts.*;
import com.sbnz.gleficu.model.phases.*;
import com.sbnz.gleficu.model.*;
import com.sbnz.gleficu.model.enums.*;

// 1

rule "Na osnovu unesenih tagova filtrira se lista zanrova"
    agenda-group "Lista zanrova na osnovu unesenih tagova"
    no-loop true
    when
        $r: RecommendRequest($id: id)
        $g: GenresFilterByTagsPhase(recommendId == $id, $inputTags : tags, $genres : genres)
        
        /*
        // $tagInput: Tag() from $inputTags
        $possibleGenres: Set() from accumulate (
            //$tagsInput: Set() from accumulate (
            //    $tagg: tag from $inputTags,
            //    collectSet($tagg)
            //)
            //$tagInput: Tag() from $inputTags and
            $genre: taginput: Tag() from $inputTags and Genre($tags: tags, tagInput memberOf $tags) from $genres; // $tagInput memberOf $tags
            collectSet($genre)
        )
        */

        accumulate (
            $tagInput: Tag($inTagid: id) from $inputTags;
            $tagsInput: collectSet($inTagid)
        )

        accumulate (
                //$tagsInput: Set() from accumulate (
                //    $tagg: tag from $inputTags,
                //    collectSet($tagg)
                //)
                $genre: Genre($tags: tags) from $genres
                and Tag($genreTag: id, id memberOf $tagsInput) from $tags; // $tagInput memberOf $tags
                $possibleGenres: collectSet($genre)
        )
        
    then
        System.out.println("(Uneseni tagovi) Filtriranje zanrova..");
        insert(new GenresFilterByInputTagsFact($possibleGenres));
end


rule "Na osnovu omiljenih tagova korisnika filtrira se lista zanrova"
    agenda-group "Lista zanrova na osnovu omiljenih tagova"
    no-loop true
    when
        $r: RecommendRequest($id: id)
        $g: GenresFilterByTagsPhase(recommendId == $id, $favouriteTags : tags, $genres : genres)

        accumulate (
            $tagInput: Tag($inTagid: id) from $favouriteTags;
            $tagsInput: collectSet($inTagid)
        )

        accumulate (
                $genre: Genre($tags: tags) from $genres
                and Tag($genreTag: id, id memberOf $tagsInput) from $tags;
                $possibleGenres: collectSet($genre)
        )
    then
        System.out.println("(Omiljeni tagovi) Filtriranje zanrova..");
        insert(new GenresFilterByFavTagsFact($possibleGenres));
end

// 2

rule "Filtriranje zanrova na osnovu starosne dobi i pola"
    agenda-group "Filter zanrova pol i dob"
    no-loop
    when
        
    then

end

// 3

rule "Filtriranje zanrova na osnovu liste filmova na wishlist"
agenda-group "Filter zanrova liste korisnickih filmova"
    no-loop
    when

    then

end


rule "Filtriranje zanrova na osnovu liste pogledanih filmova"
agenda-group "Filter zanrova liste korisnickih filmova"
    no-loop
    when

    then

end


rule "Filtriranje zanrova na osnovu liste ocjenjenih filmova"
agenda-group "Filter zanrova liste korisnickih filmova"
    no-loop
    when

    then

end

// 4

rule "Presjek zanrova na osnovu prethodno filtriranih"
    agenda-group "Finalno zanrovi"
    no-loop
    when 

    then

end

// 5

rule "Filter filmova po starosti filma na osnovu godina korisnika"
    agenda-group "Filter filmova godine i ocjena"
    no-loop
    when

    then

end

rule "Filter filmova po ocjeni sa imdb"
    agenda-group "Filter filmova godine i ocjena"
    no-loop
    when

    then

end

// 6

rule "Filter filmova po direktoru"
    agenda-group "Filter filmova po filmskoj ekipi"
    no-loop
    when

    then

end


rule "Filter filmova po piscima"
    agenda-group "Filter filmova po filmskoj ekipi"
    no-loop
    when

    then

end


rule "Filter filmova po glavnim glumcima"
    agenda-group "Filter filmova po filmskoj ekipi"
    no-loop
    when

    then

end